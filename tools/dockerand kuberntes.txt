1. Docker?
- Docker is a platform that enables to package, deploy, and run applications in containers
- It provides consistent runtime environment
-It provides a light weight and efficient way of runnning an application

A scenario where there are front end- backend and DB, can all be packaged as 2 seperate containers each with own dependencies.

docker build -t myapp-backend ./backend
docker build -t myapp-frontend ./frontend
docker-compose up
docker-compose down
docker service scale myapp_backend=2 //creating 2 backend containers

From golang:1.16.0  //use specific version for proper package

Best Practices :
Keep docker images small
single processor per container
docker compose to run multi container
securing docker images by scanning for vulneralibilities, using the latest version, running with least priviledge, not exposing unneccesary ports
using env variables for configuration
using private registry- to secure and distribute docker images


2. Kubernetes?
- container orchestration tools 
-highly scalable and resilient platform
-Creates a Deployment with three replicas of a containerized application.
Sets resource limits and requests for the container to ensure consistent performance.
Configures environment variables using ConfigMaps and Secrets for environment-specific configuration data.
Sets up health checks using liveness and readiness probes.
Configures a Service to expose the application to the outside world using a LoadBalancer type service.
Uses imagePullSecrets to authenticate to a private container registry.